// Функция таймера на millis()
// Взозвращает true или false
// &msF вот занчек & перед переменной означает, что все действия внутри функции будут записанны в переменную которую мы сюда подставим

bool timer(uint32_t &msF, uint32_t timeOut, bool refresh_ms=true){
  if ((int32_t)(ms - msF) >= timeOut){
    if (refresh_ms) {msF = ms;} //Если refresh_ms=true (значение по умолчанию), то обновим время в переменной &msF
    return true;
  }
  else{
    return false;
  }
}

/////////////////////////////////
// Пример
/*
//Глобальные пременные
uint32_t ms=0;                    // Текущее время с начала работы МК

uint32_t msTempIn1=0;             // Время опроса термометра
uint32_t DELAY_TempIn1=2000;      // Как часто опрашивать датчик (задержка или time out) указываем в милисекундах

uint32_t msBacklight=0;           // Время с последнего нажатия на любую клавишу
uint32_t DELAY_Backlight=30000;   // Через сколько милесекунд отключить подсветку экрана

//Незабудте вставить строчку в void loop()
void loop(){
  ms = millis();        // Текущее время с начала работы МК
  //... 
  //  какой-то ваш код
  //...

// функция timer должна быть в if
// Может быть где то в коде (внутри функции к примеру), но в итоге все равно окажется в void loop()
// данные в переменной msTempIn1 будут обновляться.
  if (timer(msTempIn1, DELAY_TempIn1)){
    ... ваш код
    (Например опрос датчика)
  }

// данные в переменной msBacklight не будут обновляться, так как указали третий параметр в функции равный false.
  if (timer(msBacklight, DELAY_Backlight, false)){ 
    //... ваш код
    //(Например Если долго не нажимали не одну кнопку, то выключим подсветку экрана)
  }
  
  ...
// Где то в другом месте где идет проверка когда последний раз нажимали на кнопку
// мы обновим msBacklight что бы реализовать задержку выключения экрана через сколько то секунд 
  msBacklight=ms;
  ...
}
*/
